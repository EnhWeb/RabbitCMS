(function ($) { function transitionEnd() { var el = document.createElement("bootstrap"); var transEndEventNames = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" }; for (var name in transEndEventNames) { if (el.style[name] !== undefined) { return { end: transEndEventNames[name] } } } return false } $.fn.emulateTransitionEnd = function (duration) { var called = false; var $el = this; $(this).one("bsTransitionEnd", function () { called = true }); var callback = function () { if (!called) { $($el).trigger($.support.transition.end) } }; setTimeout(callback, duration); return this }; $(function () { $.support.transition = transitionEnd(); if (!$.support.transition) { return } $.event.special.bsTransitionEnd = { bindType: $.support.transition.end, delegateType: $.support.transition.end, handle: function (e) { if ($(e.target).is(this)) { return e.handleObj.handler.apply(this, arguments) } } } }) })(jQuery); (function ($) { var Modal = function (element, options) { this.options = options; this.$body = $(document.body); this.$element = $(element); this.$dialog = this.$element.find(".modal-dialog"); this.$backdrop = null; this.isShown = null; this.originalBodyPad = null; this.ignoreBackdropClick = false; if (this.options.remote) { this.$element.find(".modal-content").load(this.options.remote, $.proxy(function () { this.$element.trigger("loaded.bs.modal") }, this)) } }; Modal.VERSION = "3.3.4"; Modal.TRANSITION_DURATION = 300; Modal.BACKDROP_TRANSITION_DURATION = 150; Modal.DEFAULTS = { backdrop: true, keyboard: true, show: true, }; Modal.prototype.toggle = function (_relatedTarget) { return this.isShown ? this.hide() : this.show(_relatedTarget) }; Modal.prototype.show = function (_relatedTarget) { var that = this; var e = $.Event("show.bs.modal", { relatedTarget: _relatedTarget }); this.$element.trigger(e); if (this.isShown || e.isDefaultPrevented()) { return } this.isShown = true; this.$body.addClass("modal-open"); this.escape(); this.initPos(); this.resize(); this.options.zindex = this.options.zindex ? this.options.zindex : 1050; this.$element.css({ visibility: "visible", display: "block", zIndex: this.options.zindex + 1 }); this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this)); this.$dialog.on("mousedown.dismiss.bs.modal", function () { that.$element.one("mouseup.dismiss.bs.modal", function (e) { if ($(e.target).is(that.$element)) { that.ignoreBackdropClick = true } }) }); this.backdrop(function () { var transition = $.support.transition && that.$element.hasClass("fade"); if (!that.$element.parent().length) { that.$element.appendTo(that.$body) } that.$element.show().scrollTop(0); if (transition) { that.$element[0].offsetWidth } that.$element.addClass("in").attr("aria-hidden", false); var e = $.Event("shown.bs.modal", { relatedTarget: _relatedTarget }); transition ? that.$dialog.one("bsTransitionEnd", function () { that.$element.trigger("focus").trigger(e) }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger("focus").trigger(e) }) }; Modal.prototype.initPos = function (e) { var winH = $(window).height(), DiaH = this.$element.height(); if (DiaH > winH) { } else { } }; Modal.prototype.hide = function (e) { if (e) { e.preventDefault() } e = $.Event("hide.bs.modal"); this.$element.trigger(e); if (this.$element.data("maskclick") == false) { return } if (!this.isShown || e.isDefaultPrevented()) { return } this.isShown = false; this.escape(); this.resize(); $(document).off("focusin.bs.modal"); this.$element.removeClass("in").attr("aria-hidden", true).off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"); this.$dialog.off("mousedown.dismiss.bs.modal"); $.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal() }; Modal.prototype.enforceFocus = function () { $(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function (e) { if (this.$element[0] !== e.target && !this.$element.has(e.target).length) { this.$element.trigger("focus") } }, this)) }; Modal.prototype.escape = function () { if (this.isShown && this.options.keyboard) { this.$element.on("keydown.dismiss.bs.modal", $.proxy(function (e) { e.which == 27 && this.hide() }, this)) } else { if (!this.isShown) { this.$element.off("keydown.dismiss.bs.modal") } } }; Modal.prototype.resize = function () { if (this.isShown) { } else { } }; Modal.prototype.hideModal = function () { var that = this; this.$element.hide(); this.$element.css({ visibility: "hidden", display: "none", zIndex: "-1" }); this.backdrop(function () { if (that.$element.data("maskclick") == "false") { return } that.$body.removeClass("modal-open"); that.$element.trigger("hidden.bs.modal") }) }; Modal.prototype.removeBackdrop = function () { this.$backdrop && this.$backdrop.remove(); this.$backdrop = null }; Modal.prototype.backdrop = function (callback) { var that = this; var animate = this.$element.hasClass("fade") ? "fade" : ""; if (this.isShown && this.options.backdrop) { var doAnimate = $.support.transition && animate; this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').css("zIndex", this.options.zindex).appendTo(this.$body); this.$element.on("click.dismiss.bs.modal", $.proxy(function (e) { if (this.ignoreBackdropClick) { this.ignoreBackdropClick = false; return } if (e.target !== e.currentTarget) { return } this.options.backdrop == "static" ? this.$element[0].focus() : this.hide() }, this)); if (doAnimate) { this.$backdrop[0].offsetWidth } this.$backdrop.addClass("in"); if (!callback) { return } doAnimate ? this.$backdrop.one("bsTransitionEnd", callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback() } else { if (!this.isShown && this.$backdrop) { this.$backdrop.removeClass("in"); var callbackRemove = function () { that.removeBackdrop(); callback && callback() }; $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove() } else { if (callback) { callback() } } } }; function Plugin(option, _relatedTarget) { return this.each(function () { var $this = $(this); var data = $this.data("bs.modal"); var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == "object" && option); if (!data) { $this.data("bs.modal", (data = new Modal(this, options))) } if (typeof option == "string") { data[option](_relatedTarget) } else { if (options.show) { data.show(_relatedTarget) } } }) } var old = $.fn.modal; $.fn.modal = Plugin; $.fn.modal.Constructor = Modal; $.fn.modal.noConflict = function () { $.fn.modal = old; return this }; $(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function (e) { var $this = $(this); var href = $this.attr("href"); var $target = $($this.attr("data-target") || (href && href.replace(/.*(?=#[^\s]+$)/, ""))); var option = $target.data("bs.modal") ? "toggle" : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data()); if ($this.is("a")) { e.preventDefault() } $target.one("show.bs.modal", function (showEvent) { if (showEvent.isDefaultPrevented()) { return } $target.one("hidden.bs.modal", function () { $this.is(":visible") && $this.trigger("focus") }) }); Plugin.call($target, option, this) }) })(jQuery); (function ($) { var Tab = function (element) { this.element = $(element) }; Tab.prototype.show = function () { var $this = this.element; var $ul = $this.closest("ul"); var selector = $this.data("target"); if (!selector) { selector = $this.attr("href"); selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "") } if ($this.parent("li").hasClass("active")) { return } var $previous = $ul.find(".active:last a"); var hideEvent = $.Event("hide.bs.tab", { relatedTarget: $this[0] }); var showEvent = $.Event("show.ao.tab", { relatedTarget: $previous[0] }); $previous.trigger(hideEvent); $this.trigger(showEvent); if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) { return } var $target = $(selector); this.activate($this.closest("li"), $ul); this.activate($target, $target.parent(), function () { $previous.trigger({ type: "hidden.ao.tab", relatedTarget: $this[0] }); $this.trigger({ type: "shown.ao.tab", relatedTarget: $previous[0] }) }) }; Tab.prototype.activate = function (element, container, callback) { var $active = container.find("> .active"); function next() { $active.removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", false); element.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", true); element.removeClass("fade"); callback && callback() } if ($active.length) { next() } $active.removeClass("in") }; function Plugin(option) { return this.each(function () { var $this = $(this); var data = $this.data("bs.tab"); if (!data) { $this.data("bs.tab", (data = new Tab(this))) } if (typeof option == "string") { data[option]() } }) } var old = $.fn.tab; $.fn.tab = Plugin; $.fn.tab.Constructor = Tab; $.fn.tab.noConflict = function () { $.fn.tab = old; return this }; var clickHandler = function (e) { e.preventDefault(); Plugin.call($(this), "show") }; $(document).on("click.ao.tab.data-api", '[data-toggle="tab"]', clickHandler).on("click.ao.tab.data-api", '[data-toggle="pill"]', clickHandler) })(jQuery); AO = {}; AO.namespace = function (str) { var arr = str.split("."), o = AO; for (var i = (arr[0] == "AO") ? 1 : 0; i < arr.length; i++) { o[arr[i]] = o[arr[i]] || {}; o = o[arr[i]] } }; AO.namespace("progress"); AO.progress.run = function () { NProgress.start(); $(window).load(function () { NProgress.done() }) }; AO.namespace("loading"); AO.loading = (function ($) { var instance, className, defaults = { isMask: true, isTransparent: true }, opts; var _private = { init: function () { var _this = this; if (!instance) { this.$MaskBox = $('<div class="splash-loader"><div class="splash-spinner" role="spinner"><div class="spinner-icon"></div><p class="txt">加 载 中...</p></div></div>'); this.$MaskBox.appendTo($("body")); this.$MaskBox.on("click", function (event) { if (!$(event.target).closest($(".splash-spinner")).length) { _this.hide() } }); instance = true } }, show: function (option) { this.init(); opts = $.extend(defaults, option); if (opts.isMask) { className = (opts.isTransparent ? "loader-transparent custom-loader" : "loader-notransparent custom-loader"); this.$MaskBox.addClass(className) } this.$MaskBox.fadeIn(250) }, hide: function () { var _this = this; this.$MaskBox.fadeOut(250, function () { _this.$MaskBox.removeClass(className) }) } }; return { show: function (option) { _private.show(option) }, hide: function () { _private.hide() } } })(jQuery); AO.namespace("tooltip"); AO.tooltip = (function ($) { var cssProPerty = { backgroundColor: "rgba(0,0,0,0.7)", visibility: "hidden", borderRadius: "5px", color: "#fff", opacity: 0, fontSize: "14px", zIndex: "-1", padding: "7px 10px", position: "fixed", zIndex: "1000" }; var instance = null; var defaults = { pause: 1500, mask: false }, opts, diaSize = {}, winScreen = {}; var _private = { init: function () { if (!instance) { this.$diaBox = $("<div id='J_tipDialogBox'></div>"); this.$diaBox.css(cssProPerty).appendTo($("body")); var that = this; $(window).on("ortchange", function () { winScreen.w = $(this).width(), winScreen.h = $(this).height(); that.setPos(opts.y, diaSize, winScreen) }); this.Timer = null; instance = true } }, getWinScreen: function () { var that = this; var size = {}; size.w = $(window).width(), size.h = $(window).height(); return size }, getDiaSize: function () { var size = {}; size.w = this.$diaBox.width(), size.h = this.$diaBox.height(); return size }, show: function (opts) { var that = this; clearTimeout(this.Timer); this.$diaBox.css({ "visibility": "visible", "zIndex": 9999999999999 }).animate({ "opacity": 1 }, 500, function () { that.Timer = setTimeout(function () { that.hide() }, opts.pause) }) }, hide: function () { this.$diaBox.css({ "visibility": "visible" }).animate({ "opacity": 0, "zIndex": -1 }, 500) }, setPos: function (y) { var y = y || "center", pos = {}; diaSize = this.getDiaSize(); winScreen = this.getWinScreen(); pos.x = (winScreen.w - diaSize.w) / 2; if (y == "center") { pos.y = (winScreen.h - diaSize.h) / 2 } else { pos.y = y } this.$diaBox.css({ top: pos.y, left: pos.x }) }, setTitle: function (opts) { var that = this; this.init(); if (this.$diaBox.css("visibility") != "visible") { this.hide() } this.$diaBox.html(opts.text); this.setPos(opts.y); this.show(opts) } }; return { show: function (options) { options.mask = options.mask || false; opts = $.extend(defaults, options); _private.setTitle(opts) } } })(jQuery); AO.namespace("shareWxFrined"); AO.shareWxFrined = (function ($) { var $shareWxFrinedBox = $('<div class="shareWxFriendbox"></div>'), instance, _private = { init: function () { if (!instance) { $shareWxFrinedBox.appendTo($("body")); $shareWxFrinedBox.on("click.ao.share.hide", this.hide) } }, show: function () { this.init(); $shareWxFrinedBox.stop(false, true).fadeIn("250") }, hide: function () { $shareWxFrinedBox.stop(false, true).fadeOut("250") } }; $(document).on("click.ao.share.data-api", '[data-parter="shareWxFriend"]', function () { _private.show() }) })(jQuery); AO.namespace("dialogSetHeight"); AO.dialogSetHeight = function (precentH, reduce, elemId) { function winResize() { var h = $(window).height() * precentH; h = h - reduce; $(elemId).height(h) } $(window).on("resize", function () { winResize() }).resize() };